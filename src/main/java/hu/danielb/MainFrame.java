//TODO: fejléc szerkesztés
//TODO: beállítások ablak összes beállítást egybefogva
//TODO: korosztály gyors beállítás (kezdődátum +hány év egy korosztály)
//TODO: nem név alapján
//TODO: régi adatok újrafelhasználása rajtszám elvételével
//TODO: iskolalista
//TODO: iskola legördülő ne csak az elején keressen
//TODO: ormlite
//TODO: maven
//TODO: git
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.danielb;


import hu.danielb.components.FejlecMenuItem;
import hu.danielb.components.GenericTabbedPane;
import hu.danielb.components.table.AttributiveCellTableModel;
import hu.danielb.components.table.CellSpan;
import hu.danielb.components.table.MultiSpanCellTable;
import hu.danielb.data.*;
import hu.danielb.listeners.FinishingListener;
import net.sf.jxls.exception.ParsePropertyException;
import net.sf.jxls.transformer.XLSTransformer;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

import javax.swing.*;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author balu
 */
public class MainFrame extends javax.swing.JFrame {

    private static final String FIU = "F";
    private static final String LANY = "L";
    private static final String FIUCSAPAT = "FC";
    private static final String LANYCSAPAT = "LC";
    private static final String EXPORTS_PATH = "exports";
    final JDialog startupScreen = new StartupScreen(this, true, "2.6"); //>>>>>>> version
    Map<String, JTable> tables;
    String[] headerString;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTabbedPane korosztalyPane;

    public MainFrame() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        init();

        positionToCenter();
    }

    public static void main(String[] args) {
        MainFrame mainFrame = new MainFrame();
        mainFrame.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        korosztalyPane = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);

        initPane();

        jButton2.setText("Beérkező");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
                jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Nyomtatás");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuItem7.setText("Export");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem3.setText("Kilépés");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Szerkesztés");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Versenyző hozzáadása");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("Beérkezők megadása");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem1.setText("Korosztályok");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem6.setText("Versenyzők");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Beállítások");

        jMenu4.setText("Nyomtatási Fejléc");
        loadFejlecek();
        jMenu3.add(jMenu4);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(korosztalyPane, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(korosztalyPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        KorosztalyokDialog dialog = new KorosztalyokDialog(this);
        dialog.setVisible(true);
        loadData();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JDialog addFrame = new AddVersenyzoDialog(this);
        addFrame.setVisible(true);
        loadData();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        jButton2.doClick();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        FinishingDialog dialog = new FinishingDialog(this);
        dialog.addFinishingListener(new FinishingListener() {
            @Override
            public void racerFinished(Versenyzo v) {
                loadData();
            }
        });
        dialog.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (headerString != null && headerString.length > 0) {
            GenericTabbedPane ktab = (GenericTabbedPane) korosztalyPane.getComponentAt(korosztalyPane.getSelectedIndex());
            Korosztaly korosztaly = (Korosztaly) ktab.getData();
            GenericTabbedPane.Tab tab = ktab.getTab(ktab.getSelectedIndex());

            try {
                Printer printer;
                if (tab.getId() == FIUCSAPAT || tab.getId() == LANYCSAPAT) {
                    printer = new Printer(korosztaly.getNev() + ", " + tab.getTitle(), tables.get(korosztaly.getId() + (String) tab.getId()), headerString, true);
                } else {
                    printer = new Printer(korosztaly.getNev() + ", " + tab.getTitle(), tables.get(korosztaly.getId() + (String) tab.getId()), headerString);
                }
            } catch (PrinterException ex) {
                warn("Nyomtatási hiba!");
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            warn("Nincs fejléc kiválasztva!");
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        VersenyzokDialog dial = new VersenyzokDialog(this);
        dial.setVisible(true);
        loadData();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {

            List<Category> eredmeny = new ArrayList<>();

            ResultSet rs = Database.runSql("select * from Korosztaly");
            while (rs.next()) {
                File exportDir = new File(EXPORTS_PATH);
                if (!exportDir.exists()) {
                    exportDir.mkdirs();
                }
                Category fiuKorosztaly = new Category();
                eredmeny.add(fiuKorosztaly);
                fiuKorosztaly.egyeni.name = rs.getString("name") + " " + "Fiú, egyéni";
                fiuKorosztaly.csapat.name = rs.getString("name") + " " + "Fiú, csapat";
                Category lanyKorosztaly = new Category();
                eredmeny.add(lanyKorosztaly);
                lanyKorosztaly.egyeni.name = rs.getString("name") + " " + "Lány, egyéni";
                lanyKorosztaly.csapat.name = rs.getString("name") + " " + "Lány, csapat";
                ResultSet rs2 = getByKorosztalyNem(rs.getInt("id"), FIU);
                while (rs2.next()) {
                    ResultSet rs3 = Database.runSql("select * from 'Korosztaly' where id = ?", Database.QUERRY, rs2.getString("K_id"));
                    Korosztaly korosztaly = null;
                    while (rs3.next()) {
                        korosztaly = new Korosztaly(rs.getInt("id"), rs.getString("name"), rs.getInt("minimum"), rs.getInt("maximum"));
                    }
                    rs3 = Database.runSql("select * from 'Iskola' where id = ?", Database.QUERRY, rs2.getString("I_id"));
                    Iskola iskola = null;
                    while (rs3.next()) {
                        iskola = new Iskola(rs3.getInt("id"), rs3.getString("name"));
                    }
                    fiuKorosztaly.egyeni.versenyzok.add(new Versenyzo(rs2.getInt("id"), rs2.getInt("position"), rs2.getString("name"), rs2.getString("sex"), rs2.getInt("number"), korosztaly, iskola, rs2.getInt("age")));
                }
                rs2 = getByKorosztalyNem(rs.getInt("id"), LANY);
                while (rs2.next()) {

                    ResultSet rs3 = Database.runSql("select * from 'Korosztaly' where id = ?", Database.QUERRY, rs2.getString("K_id"));
                    Korosztaly korosztaly = null;
                    while (rs3.next()) {
                        korosztaly = new Korosztaly(rs.getInt("id"), rs.getString("name"), rs.getInt("minimum"), rs.getInt("maximum"));
                    }
                    rs3 = Database.runSql("select * from 'Iskola' where id = ?", Database.QUERRY, rs2.getString("I_id"));
                    Iskola iskola = null;
                    while (rs3.next()) {
                        iskola = new Iskola(rs3.getInt("id"), rs3.getString("name"));
                    }
                    lanyKorosztaly.egyeni.versenyzok.add(new Versenyzo(rs2.getInt("id"), rs2.getInt("position"), rs2.getString("name"), rs2.getString("sex"), rs2.getInt("number"), korosztaly, iskola, rs2.getInt("age")));
                }

                rs2 = getByKorosztalyNem(rs.getInt("id"), FIU);
                Vector<Vector<String>> data = new Vector<Vector<String>>();
                while (rs2.next()) {
                    if (rs2.getInt("position") > 0) {
                        data.add(new Vector<String>(Arrays.asList(new String[]{String.valueOf(rs2.getInt("id")), String.valueOf(rs2.getInt("position")), String.valueOf(rs2.getInt("number")), rs2.getString("name"), rs2.getString("I_name")})));
                    }
                }

                fiuKorosztaly.csapat.csapatok.addAll(makeTeams(data));

                rs2 = getByKorosztalyNem(rs.getInt("id"), LANY);
                data = new Vector<Vector<String>>();
                while (rs2.next()) {
                    if (rs2.getInt("position") > 0) {
                        data.add(new Vector<String>(Arrays.asList(new String[]{String.valueOf(rs2.getInt("id")), String.valueOf(rs2.getInt("position")), String.valueOf(rs2.getInt("number")), rs2.getString("name"), rs2.getString("I_name")})));
                    }
                }
                lanyKorosztaly.csapat.csapatok.addAll(makeTeams(data));
            }

            Map beans = new HashMap();
            beans.put("eredmenyek", eredmeny);
            XLSTransformer transformer = new XLSTransformer();
            File file = new File(EXPORTS_PATH + File.separator + "export.xls");
            OutputStream os = new FileOutputStream(file);
            InputStream template = getClass().getResourceAsStream("/templates/egyeni_template.xls");
            transformer.transformXLS(template, beans).write(os);
        } catch (SQLException | IOException | ParsePropertyException | InvalidFormatException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void positionToCenter() {
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        int w = this.getSize().width;
        int h = this.getSize().height;
        int x = (dim.width - w) / 2;
        int y = (dim.height - h) / 2;
        this.setLocation(x, y);
    }

    private void init() {
        try {
            Class.forName("org.sqlite.JDBC");
            new Thread() {
                @Override
                public void run() {
                    try {
                        Database.connect();

                        tables = new HashMap<String, JTable>();
                        initComponents();
                        loadData();

                        startupScreen.dispose();
                    } catch (SQLException ex) {
                        warn("Hiba az adatok betöltése közben!");
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        System.exit(1);
                    }
                }
            }.start();
            startupScreen.setVisible(true);
        } catch (ClassNotFoundException ex) {
            warn("Hiba az adatok betöltése közben!");
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            System.exit(1);
        }
    }

    private void loadFejlecek() {
        MenuElement[] elements = jMenu4.getSubElements();
        for (MenuElement element : elements) {
            MenuElement[] menuElement = element.getSubElements();
            for (MenuElement menuElement1 : menuElement) {
                buttonGroup2.remove((JMenuItem) menuElement1);
            }
        }
        jMenu4.removeAll();

        try {
            ResultSet rs = Database.runSql("select * from Fejlec");
            while (rs.next()) {
                FejlecMenuItem<Fejlec> item = new FejlecMenuItem<>(new Fejlec(rs.getInt("id"), rs.getString("name"), rs.getString("text")));
                item.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        headerString = ((Fejlec) ((FejlecMenuItem) e.getSource()).getData()).getFlText().split("\n");
                    }
                });
                buttonGroup2.add(item);
                jMenu4.add(item);
                buttonGroup2.setSelected(item.getModel(), true);
                headerString = item.getData().getFlText().split("\n");
            }
            JMenuItem edit = new JMenuItem("Új");
            edit.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    AddFejlecDialog addFejlecDialog = new AddFejlecDialog(MainFrame.this);
                    addFejlecDialog.setVisible(true);
                    loadFejlecek();
                }
            });
            jMenu4.add(edit);
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void initPane() {
        korosztalyPane.removeAll();
        try {
            ResultSet rs = Database.runSql("select * from 'Korosztaly'");
            while (rs.next()) {
                GenericTabbedPane<Korosztaly> jtp = new GenericTabbedPane<>(new Korosztaly(rs.getInt("id"), rs.getString("name"), rs.getInt("minimum"), rs.getInt("maximum")));
                String korosztalyId = String.valueOf(rs.getInt("id"));

                jtp.setPreferredSize(new Dimension(korosztalyPane.getHeight(), korosztalyPane.getWidth()));

                jtp.addTab(FIU, "Fiú", createTable(korosztalyId + FIU, new Dimension(jtp.getHeight(), jtp.getWidth())));
                jtp.addTab(LANY, "Lány", createTable(korosztalyId + LANY, new Dimension(jtp.getHeight(), jtp.getWidth())));
                jtp.addTab(FIUCSAPAT, "Fiú Csapat", createTable(korosztalyId + FIUCSAPAT, new Dimension(jtp.getHeight(), jtp.getWidth())));
                jtp.addTab(LANYCSAPAT, "Lány Csapat", createTable(korosztalyId + LANYCSAPAT, new Dimension(jtp.getHeight(), jtp.getWidth())));

                korosztalyPane.addTab(rs.getString("name"), jtp);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private JScrollPane createTable(String name, Dimension size) {
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.CENTER);

        MultiSpanCellTable jt = new MultiSpanCellTable(
                new AttributiveCellTableModel(new String[][]{{"", "", "", "", ""}}, new String[]{"", "Helyezés", "Rajtszám", "Név", "Iskola"})) {
            @Override
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        jt.getTableHeader().setReorderingAllowed(false);
        jt.getTableHeader().setResizingAllowed(false);

        for (int i = 0; i < jt.getColumnCount(); i++) {
            jt.getColumnModel().getColumn(i).setCellRenderer(dtcr);
        }
        setColumnWidth(jt, 0, 0);
        setColumnWidth(jt, 1, 25);
        setColumnWidth(jt, 2, 75);
        setColumnWidth(jt, 3, 25);

        JScrollPane jspF = new JScrollPane(jt);
        jspF.setPreferredSize(size);
        tables.put(name, jt);
        return jspF;
    }

    private void loadData() {
        new Thread() {
            @Override
            public void run() {
                try {
                    ResultSet rs = Database.runSql("select * from 'Korosztaly'");
                    while (rs.next()) {
                        updateData(new Korosztaly(rs.getInt("id"), rs.getString("name"), rs.getInt("minimum"), rs.getInt("maximum")));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private void updateData(Korosztaly korosztaly) {
        loadTable(FIU, korosztaly);
        loadTable(LANY, korosztaly);
    }

    private void loadTable(String sex, Korosztaly korosztaly) {
        try {
            ResultSet rs = getByKorosztalyNem(korosztaly.getId(), sex);
            Vector<Vector<String>> data = new Vector<Vector<String>>();
            Vector<Vector<String>> disq = new Vector<Vector<String>>();
            while (rs.next()) {
                if (rs.getInt("position") > 0) {
                    data.add(new Vector<String>(Arrays.asList(new String[]{String.valueOf(rs.getInt("id")), String.valueOf(rs.getInt("position")), String.valueOf(rs.getInt("number")), rs.getString("name"), rs.getString("I_name")})));
                } else {
                    disq.add(new Vector<String>(Arrays.asList(new String[]{String.valueOf(rs.getInt("id")), "", String.valueOf(rs.getInt("number")), rs.getString("name"), rs.getString("I_name")})));
                }
            }
            if (!data.isEmpty() || !disq.isEmpty()) {
                loadTeams(sex, korosztaly, data);

                data.addAll(disq);

                addDataToTable(String.valueOf(korosztaly.getId()) + sex, data);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void loadTeams(String sex, Korosztaly korosztaly, Vector<Vector<String>> data) {

        ArrayList<Team> teams = makeTeams(data);
        Vector<Vector<String>> teamData = new Vector<Vector<String>>();
        try {
            for (int i = 0; i < teams.size(); i++) {
                for (int j = 0; j < teams.get(i).getMembers().size(); j++) {
                    ResultSet rs;
                    rs = Database.runSql("select Versenyzo.*,Iskola.name as I_name from 'Versenyzo' inner join 'Iskola' on Versenyzo.school_id=Iskola.id where Versenyzo.id = ?", Database.QUERRY, String.valueOf(teams.get(i).getMembers().get(j).getId()));
                    while (rs.next()) {
                        teamData.add(new Vector<String>(Arrays.asList(
                                new String[]{String.valueOf(rs.getInt("id")),
                                        String.valueOf(i + 1),
                                        String.valueOf(teams.get(i).getPoints(4)),
                                        String.valueOf(rs.getInt("position")),
                                        String.valueOf(rs.getInt("number")),
                                        rs.getString("name"),
                                        rs.getString("I_name")})));
                    }

                }
            }
            String tableName = String.valueOf(korosztaly.getId()) + getTeamConst(sex);
            addDataToTable(tableName, teamData);
            JTable jt = tables.get(tableName);
            CellSpan cellAtt = (CellSpan) ((AttributiveCellTableModel) jt.getModel()).getCellAttribute();
            for (int i = 0; i < (teams.size() * 4); i = i + 4) {
                cellAtt.combine(new int[]{i + 0, i + 1, i + 2, i + 3}, new int[]{1});
                cellAtt.combine(new int[]{i + 0, i + 1, i + 2, i + 3}, new int[]{2});
                cellAtt.combine(new int[]{i + 0, i + 1, i + 2, i + 3}, new int[]{6});
            }

            jt.clearSelection();
            jt.revalidate();
            jt.repaint();

        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private ArrayList<Team> makeTeams(Vector<Vector<String>> data) {
        HashMap<String, Team> tmp = new HashMap<String, Team>();
        for (Vector<String> data1 : data) {
            boolean added = false;
            int n = 0;
            do {
                String sch = data1.get(4) + n;
                if (tmp.containsKey(sch)) {
                    if (!tmp.get(sch).isFull()) {
                        tmp.get(sch).addMember(new Versenyzo(
                                Integer.parseInt(data1.get(0)),
                                Integer.parseInt(data1.get(1)),
                                data1.get(3),
                                "",
                                Integer.parseInt(data1.get(2)),
                                new Korosztaly(0, "", 0, 0),
                                new Iskola(0, data1.get(4)), 0));
                        added = true;
                    } else {
                        n++;
                    }
                } else {
                    tmp.put(sch, new Team(sch));
                    tmp.get(sch).addMember(new Versenyzo(
                            Integer.parseInt(data1.get(0)),
                            Integer.parseInt(data1.get(1)),
                            data1.get(3),
                            "",
                            Integer.parseInt(data1.get(2)),
                            new Korosztaly(0, "", 0, 0),
                            new Iskola(0, data1.get(4)), 0));
                    added = true;
                }
            } while (!added);
        }

        ArrayList<Team> teams = new ArrayList<Team>();
        Iterator it = tmp.keySet().iterator();
        while (it.hasNext()) {
            Object key = it.next();
            Team val = tmp.get(key);
            if (val.isFull()) {
                teams.add(val);
            }
        }
        boolean swapped;
        do {
            swapped = false;
            for (int i = 1; i < teams.size(); i++) {
                if (teams.get(i).lowerThan(teams.get(i - 1))) {
                    Team t = teams.get(i - 1);
                    teams.set(i - 1, teams.get(i));
                    teams.set(i, t);
                    swapped = true;
                }
            }
        } while (swapped);

        return teams;
    }

    private void addDataToTable(String tableName, Vector<Vector<String>> data) {
        DefaultTableCellRenderer dtcr = new DefaultTableCellRenderer();
        dtcr.setHorizontalAlignment(SwingConstants.CENTER);

        JTable currentTable = tables.get(tableName);
        if (tableName.contains(FIUCSAPAT) || tableName.contains(LANYCSAPAT)) {
            currentTable.setModel(new AttributiveCellTableModel(data, new Vector<String>(Arrays.asList(new String[]{"", "Helyezés", "Pontszám", "Egyéni", "Rajtszám", "Név", "Iskola"}))) {
                @Override
                public boolean isCellEditable(int rowIndex, int colIndex) {
                    return false;
                }
            });
            setColumnWidth(currentTable, 0, 0);
            setColumnWidth(currentTable, 1, 60);
            setColumnWidth(currentTable, 2, 60);
            setColumnWidth(currentTable, 3, 60);
            setColumnWidth(currentTable, 4, 60);
            setColumnWidth(currentTable, 5, 180);
        } else {
            currentTable.setModel(new AttributiveCellTableModel(data, new Vector<String>(Arrays.asList(new String[]{"", "Helyezés", "Rajtszám", "Név", "Iskola"}))) {
                @Override
                public boolean isCellEditable(int rowIndex, int colIndex) {
                    return false;
                }
            });
            setColumnWidth(currentTable, 0, 0);
            setColumnWidth(currentTable, 1, 80);
            setColumnWidth(currentTable, 2, 80);
            setColumnWidth(currentTable, 3, 180);
        }
        currentTable.getTableHeader().setReorderingAllowed(false);
        currentTable.getTableHeader().setResizingAllowed(false);
        for (int i = 0; i < currentTable.getColumnCount(); i++) {
            currentTable.getColumnModel().getColumn(i).setCellRenderer(dtcr);
        }
        currentTable.setEnabled(false);
    }

    private String getTeamConst(String sex) {
        switch (sex) {
            case FIU:
                return FIUCSAPAT;
            case LANY:
                return LANYCSAPAT;
            default:
                throw new AssertionError();
        }
    }

    protected void warn(String msg) {
        JOptionPane.showMessageDialog(this, msg, "", JOptionPane.WARNING_MESSAGE);
    }

    protected void message(String msg) {
        JOptionPane.showMessageDialog(this, msg, "", JOptionPane.INFORMATION_MESSAGE);
    }

    private void setColumnWidth(JTable table, int columnNumber, int size) {
        TableColumn tc = table.getColumnModel().getColumn(columnNumber);
        tc.setMaxWidth(size);
        tc.setMinWidth(size);
        tc.setPreferredWidth(size);
    }
    // End of variables declaration//GEN-END:variables

    private ResultSet getByKorosztalyNem(int id, String sex) throws SQLException {
        return Database.runSql("select 0 as sqn, Versenyzo.*, Korosztaly.id as K_id, Iskola.name as I_name, Iskola.id as I_id from Versenyzo "
                + "inner join Korosztaly on Versenyzo.korosztaly_id = Korosztaly.id "
                + "inner join Iskola on Versenyzo.school_id = Iskola.id "
                + "where K_id = ? and sex = ? and position > 0 "
                + "union all "
                + "select 1 as sqn, Versenyzo.*, Korosztaly.id as K_id, Iskola.name as I_name, Iskola.id as I_id from Versenyzo "
                + "inner join Korosztaly on Versenyzo.korosztaly_id = Korosztaly.id "
                + "inner join Iskola on Versenyzo.school_id = Iskola.id "
                + "where K_id = ? and sex = ? and position = 0 "
                + "order by sqn, position, I_name, Versenyzo.name", Database.QUERRY, String.valueOf(id), sex, String.valueOf(id), sex);
    }

    private ResultSet countByKorosztalyNem(int id, String sex) throws SQLException {
        return Database.runSql("select count(*) from Versenyzo "
                + "where korosztaly_id = ? and sex = ?", Database.QUERRY, String.valueOf(id), sex);
    }

    public class Category {

        Egyeni egyeni = new Egyeni();
        Csapat csapat = new Csapat();

        public Egyeni getEgyeni() {
            return egyeni;
        }

        public void setEgyeni(Egyeni egyeni) {
            this.egyeni = egyeni;
        }

        public Csapat getCsapat() {
            return csapat;
        }

        public void setCsapat(Csapat csapat) {
            this.csapat = csapat;
        }

    }

    public class Egyeni {

        String name = "";
        List<Versenyzo> versenyzok = new ArrayList<>();

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<Versenyzo> getVersenyzok() {
            return versenyzok;
        }

        public void setVersenyzok(List<Versenyzo> versenyzok) {
            this.versenyzok = versenyzok;
        }

    }

    public class Csapat {

        String name = "";
        List<Team> csapatok = new ArrayList<>();

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<Team> getCsapatok() {
            return csapatok;
        }

        public void setCsapatok(List<Team> csapatok) {
            this.csapatok = csapatok;
        }

    }
}
