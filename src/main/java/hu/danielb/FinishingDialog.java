/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.danielb;

import hu.danielb.data.Database;
import hu.danielb.data.Iskola;
import hu.danielb.data.Korosztaly;
import hu.danielb.data.Versenyzo;
import hu.danielb.listeners.FinishingListener;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.*;
import java.util.List;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author balu
 */
public class FinishingDialog extends BaseDialog {

    /**
     * Creates new form FinishingDialog
     */
    HashMap<Integer, Integer> positionF;
    HashMap<Integer, Integer> positionL;
    HashMap<Integer, Versenyzo> versenyzok;
    HashMap<Integer, Korosztaly> korosztalyok;
    HashMap<Integer, Iskola> iskolak;
    List<FinishingListener> listeners;
    //TEST
    Versenyzo versenyzoTest;
    private Timer timer;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    public FinishingDialog(Dialog owner) {
        super(owner);
        init();
        this.setLocationRelativeTo(owner);
    }
    public FinishingDialog(Frame owner) {
        super(owner);
        init();
        this.setLocationRelativeTo(owner);
    }

    private void init() {
        initComponents();

        positionF = new HashMap<Integer, Integer>();
        positionL = new HashMap<Integer, Integer>();
        versenyzok = new HashMap<Integer, Versenyzo>();
        korosztalyok = new HashMap<Integer, Korosztaly>();
        iskolak = new HashMap<Integer, Iskola>();
        listeners = new ArrayList<>();
        ResultSet rs;
        try {
            rs = Database.runSql("select * from 'Korosztaly'");
            while (rs.next()) {
                korosztalyok.put(rs.getInt("id"), new Korosztaly(rs.getInt("id"), rs.getString("name"), rs.getInt("minimum"), rs.getInt("maximum")));
                positionF.put(rs.getInt("id"), 1);
                positionL.put(rs.getInt("id"), 1);
            }

            rs = Database.runSql("select * from 'Iskola'");
            while (rs.next()) {
                iskolak.put(rs.getInt("id"), new Iskola(rs.getInt("id"), rs.getString("name")));
            }
            rs = Database.runSql("select sex, korosztaly_id,count(*) as pos from 'Versenyzo' where position > 0  group by sex,korosztaly_id");
            while (rs.next()) {
                if (rs.getString("sex").equals("F")) {
                    positionF.put(rs.getInt("korosztaly_id"), rs.getInt("pos") + 1);
                } else {
                    positionL.put(rs.getInt("korosztaly_id"), rs.getInt("pos") + 1);
                }
            }
            rs = Database.runSql("select * from 'Versenyzo' where position = 0");
            while (rs.next()) {
                int id = rs.getInt("id");
                String nev = rs.getString("name");
                String nem = rs.getString("sex");
                int rSzam = rs.getInt("number");
                int korosztalyId = rs.getInt("korosztaly_id");
                int iskola_id = rs.getInt("school_id");
                int kor = rs.getInt("age");
                versenyzok.put(rSzam, new Versenyzo(id, 0, nev, nem, rSzam, korosztalyok.get(korosztalyId), iskolak.get(iskola_id), kor));
            }

        } catch (SQLException ex) {
            Logger.getLogger(FinishingDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(380, 300));
        setMinimumSize(new java.awt.Dimension(380, 300));
        setPreferredSize(new java.awt.Dimension(380, 300));
        setResizable(false);

        jButton2.setText("Vége");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("SansSerif", 1, 40)); // NOI18N
        jTextField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jTextField1.setMaximumSize(new java.awt.Dimension(360, 58));
        jTextField1.setMinimumSize(new java.awt.Dimension(360, 58));
        jTextField1.setPreferredSize(new java.awt.Dimension(360, 58));
        jTextField1.setHorizontalAlignment(JTextField.CENTER);
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel1.setText("Név:");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel2.setText("Iskola:");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel3.setText(" ");
        jLabel3.setMaximumSize(new java.awt.Dimension(263, 24));
        jLabel3.setMinimumSize(new java.awt.Dimension(263, 24));
        jLabel3.setPreferredSize(new java.awt.Dimension(263, 24));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel4.setText(" ");
        jLabel4.setMaximumSize(new java.awt.Dimension(263, 24));
        jLabel4.setMinimumSize(new java.awt.Dimension(263, 24));
        jLabel4.setPreferredSize(new java.awt.Dimension(263, 24));

        jLabel5.setText(" ");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel6.setText("Helyezés:");

        jLabel7.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel7.setMaximumSize(new java.awt.Dimension(263, 24));
        jLabel7.setMinimumSize(new java.awt.Dimension(263, 24));
        jLabel7.setPreferredSize(new java.awt.Dimension(263, 24));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel8.setText("Kcs:");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 20)); // NOI18N
        jLabel9.setMaximumSize(new java.awt.Dimension(263, 24));
        jLabel9.setMinimumSize(new java.awt.Dimension(263, 24));
        jLabel9.setPreferredSize(new java.awt.Dimension(263, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel5))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased

        String rajtSz = jTextField1.getText().trim();
        Versenyzo versenyzo = null;
        boolean contains = false;

        for (Map.Entry<Integer, Versenyzo> entry : versenyzok.entrySet()) {
            String rsz = String.valueOf(entry.getKey());
            if (rsz.contains(rajtSz)) {
                contains = true;
            }
            if (rsz.equals(rajtSz)) {
                versenyzo = entry.getValue();
                break;
            }
        }

        if (versenyzo != null) {
            jLabel3.setText(versenyzo.getNev());
            jLabel4.setText(versenyzo.getIskola().getNev());
            if (versenyzo.getNem().equals("F")) {
                jLabel7.setText(String.valueOf(positionF.get(versenyzo.getKorosztaly().getId())));
                jLabel9.setText(versenyzo.getKorosztaly().getNev() + " Fiú");
            } else {
                jLabel7.setText(String.valueOf(positionL.get(versenyzo.getKorosztaly().getId())));
                jLabel9.setText(versenyzo.getKorosztaly().getNev() + " Lány");
            }

        } else {
            jLabel3.setText("");
            jLabel4.setText("");
            jLabel7.setText("");
            jLabel9.setText("");
        }
        if (contains) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER && versenyzo != null) {
                try {
                    int nextpos;
                    if (versenyzo.getNem().equals("F")) {
                        nextpos = positionF.get(versenyzo.getKorosztaly().getId());
                        Database.runSql("update Versenyzo set position = ? where id = ?", Database.UPDATE, String.valueOf(nextpos), String.valueOf(versenyzo.getId()));
                        positionF.put(versenyzo.getKorosztaly().getId(), nextpos + 1);
                    } else {
                        nextpos = positionL.get(versenyzo.getKorosztaly().getId());
                        Database.runSql("update Versenyzo set position = ? where id = ?", Database.UPDATE, String.valueOf(nextpos), String.valueOf(versenyzo.getId()));
                        positionL.put(versenyzo.getKorosztaly().getId(), nextpos + 1);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(FinishingDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (FinishingListener finishingListener : listeners) {
                    finishingListener.racerFinished(versenyzo);
                }
                versenyzok.remove(versenyzo.getRajtszam());

                jTextField1.setText("");
            } else if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                warning();
            }
        } else if (evt.getKeyCode() != KeyEvent.VK_BACK_SPACE || evt.getKeyCode() != KeyEvent.VK_ESCAPE) {
            warning();
        }
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
            this.dispose();
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.dispose();
        //TEST
//        if (timer != null) {
//            timer.cancel();
//            timer = null;
//            return;
//        }
//        timer = new Timer(true);
//        timer.schedule(new TimerTask() {
//            @Override
//            public void run() {
//                int i = 0;
//                int r = new Random(System.nanoTime() * 2).nextInt(versenyzok.size());
//                for (Map.Entry<Integer, Versenyzo> entry : versenyzok.entrySet()) {
//                    if (i == r) {
//                        break;
//                    }
//                    i++;
//                    versenyzoTest = entry.getValue();
//                }
//                final Timer t = new Timer(true);
//                t.schedule(new TimerTask() {
//                    @Override
//                    public void run() {
//                        SwingUtilities.invokeLater(new Runnable() {
//                            @Override
//                            public void run() {
//                                int h = jTextField1.getText().length();
//                                if (versenyzoTest == null) {
//                                    t.cancel();
//                                    return;
//                                }
//                                String rsz = String.valueOf(versenyzoTest.getRajtszam());
//                                if (h == rsz.length()) {
//                                    try {
//                                        jTextField1KeyReleased(new KeyEvent(jTextField1, 10, 9999, 0, KeyEvent.VK_ENTER, 'e'));
//                                    } catch (StringIndexOutOfBoundsException e) {
//                                        java.util.logging.Logger.getLogger(FinishingDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, e);
//                                        jTextField1.setText("");
//                                    }
//                                    t.cancel();
//
//                                    return;
//                                }
//                                jTextField1.setText(rsz.substring(0, h + 1));
//                                jTextField1KeyReleased(new KeyEvent(jTextField1, 10, 9999, 0, KeyEvent.VK_9, 'e'));
//                            }
//                        });
//                    }
//                }, 0, 75);
//            }
//        }, 0, 400);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void warning() {
        new Thread() {
            @Override
            public void run() {
                jLabel5.setText("Nincs ilyen rajtszám!");
                Toolkit.getDefaultToolkit().beep();
                int i = 0;
                long mTime = System.currentTimeMillis();
                while (i < 300) {
                    long curentTime = System.currentTimeMillis();
                    if (curentTime > mTime + 25) {
                        jTextField1.setBackground(new Color(255, i > 255 ? 255 : i, i > 255 ? 255 : i));
                        i += 25;
                        mTime = curentTime;
                    }
                }
                try {
                    sleep(3000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(FinishingDialog.class.getName()).log(Level.SEVERE, null, ex);
                    jLabel5.setText("");
                }
                jLabel5.setText("");
            }
        }.start();
    }

    public void addFinishingListener(FinishingListener l) {
        listeners.add(l);
    }

    public void removeFinishingListener(FinishingListener l) {
        listeners.remove(l);
    }
    // End of variables declaration//GEN-END:variables
}
