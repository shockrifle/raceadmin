/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.danielb;

import hu.danielb.data.Database;
import hu.danielb.data.Iskola;
import hu.danielb.data.Korosztaly;
import hu.danielb.data.Versenyzo;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

import javax.swing.*;
import javax.swing.text.JTextComponent;
import java.awt.*;
import java.awt.event.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author balu
 */
public class AddVersenyzoDialog extends BaseDialog {

    /**
     * Creates new form AddVersenyzoDialog
     */
    SpinnerNumberModel spinnerModel;
    Versenyzo versenyzo = null;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox<Iskola> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JTextField jTextField1;
    public AddVersenyzoDialog(Dialog owner) {
        super(owner);
        init();
        setLocationRelativeTo(owner);
    }
    public AddVersenyzoDialog(Frame owner) {
        super(owner);
        init();
        setLocationRelativeTo(owner);
    }
    public AddVersenyzoDialog(Dialog owner, Versenyzo versenyzo) {
        super(owner);
        this.versenyzo = versenyzo;
        init();
        setLocationRelativeTo(owner);
    }
    public AddVersenyzoDialog(Frame owner, Versenyzo versenyzo) {
        super(owner);
        this.versenyzo = versenyzo;
        init();
        setLocationRelativeTo(owner);
    }

    private void init() {
        initComponents();
        if (versenyzo != null) {
            jLabel6.setVisible(true);
            jLabel6.setEnabled(true);
            jSpinner3.setVisible(true);
            jSpinner3.setEnabled(true);

            jSpinner3.setValue(versenyzo.getHelyezes());
            jTextField1.setText(versenyzo.getNev());
            jComboBox2.setSelectedItem(versenyzo.getIskola());
            jSpinner2.setValue(versenyzo.getKor());
            jSpinner1.setValue(versenyzo.getRajtszam());
            if ("F".equals(versenyzo.getNem())) {
                jRadioButton1.setSelected(true);
            } else {
                jRadioButton2.setSelected(true);
            }
        }
        addWindowListener(new WindowAdapter() {
            @Override
            public void windowOpened(WindowEvent e) {
                jTextField1.requestFocus();
            }
        });

        ((JSpinner.DefaultEditor) jSpinner1.getEditor()).getTextField().addFocusListener(new FocusAdapter() {
            @Override
            public void focusGained(FocusEvent e) {
                if (e.getSource() instanceof JTextComponent) {
                    final JTextComponent textComponent = ((JTextComponent) e.getSource());
                    SwingUtilities.invokeLater(new Runnable() {
                        @Override
                        public void run() {
                            textComponent.selectAll();
                        }
                    });
                }
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup2 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jComboBox2 = new javax.swing.JComboBox<Iskola>();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner1 = new javax.swing.JSpinner();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jSpinner3 = new javax.swing.JSpinner();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 225));
        setModalityType(java.awt.Dialog.ModalityType.APPLICATION_MODAL);
        setResizable(false);

        AutoCompleteDecorator.decorate(jComboBox2);
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new Iskola[]{new Iskola(0, "")}));
        try {
            ResultSet rs = Database.runSql("select * from 'Iskola' order by name");
            while (rs.next()) {
                jComboBox2.addItem(new Iskola(rs.getInt("id"), rs.getString("name")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddVersenyzoDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        int min = 9999;
        int max = 0;
        try {
            ResultSet rs = Database.runSql("select * from 'Korosztaly'");
            while (rs.next()) {
                if (rs.getInt("minimum") < min) min = rs.getInt("minimum");
                if (rs.getInt("maximum") > max) max = rs.getInt("maximum");
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddVersenyzoDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        spinnerModel = new SpinnerNumberModel(min, min, max, 1);
        jSpinner2.setModel(spinnerModel);
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        spinnerModel = new SpinnerNumberModel(1, 1, 9999, 1);
        jSpinner1.setModel(spinnerModel);
        jSpinner1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jSpinner1FocusGained(evt);
            }
        });

        jRadioButton1.addKeyListener(new KeyListener() {
                                         @Override
                                         public void keyPressed(KeyEvent e) {
                                             if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                                                 jRadioButton2.requestFocus();
                                             }
                                         }

                                         @Override
                                         public void keyReleased(KeyEvent e) {
                                         }

                                         @Override
                                         public void keyTyped(KeyEvent e) {
                                         }

                                     }
        );
        buttonGroup2.add(jRadioButton1);
        jRadioButton1.setText("Fiu");
        jRadioButton1.setActionCommand("F");
        buttonGroup2.add(jRadioButton1);

        jRadioButton2.addKeyListener(new KeyListener() {
                                         @Override
                                         public void keyPressed(KeyEvent e) {
                                             if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                                                 jButton1.requestFocus();
                                             }
                                         }

                                         @Override
                                         public void keyReleased(KeyEvent e) {
                                         }

                                         @Override
                                         public void keyTyped(KeyEvent e) {
                                         }

                                     }
        );
        buttonGroup2.add(jRadioButton2);
        jRadioButton2.setText("Lány");
        jRadioButton2.setActionCommand("L");
        buttonGroup2.add(jRadioButton2);

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setText("Vége");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Új");
        jButton4.setFocusable(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setText("Név:");

        jLabel2.setText("Iskola:");

        jLabel3.setText("Születési év:");

        jLabel4.setText("Rajtszám:");

        jLabel5.setText("Nem:");

        jLabel6.setText("Helyezés:");
        jLabel6.setEnabled(false);
        jLabel6.setVisible(false);

        spinnerModel = new SpinnerNumberModel(0, 0, 9999, 1);
        jSpinner3.setModel(spinnerModel);
        jSpinner3.setEnabled(false);
        jSpinner3.setVisible(false);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new Korosztaly[]{new Korosztaly(0, "", 0, 0)}));
        try {
            ResultSet rs = Database.runSql("select * from 'Korosztaly' order by name");
            while (rs.next()) {
                jComboBox1.addItem(new Korosztaly(rs.getInt("id"), rs.getString("name"), rs.getInt("minimum"), rs.getInt("maximum")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddVersenyzoDialog.class.getName()).log(Level.SEVERE, null, ex);
        }

        jLabel7.setText("Korosztály:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jButton1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton3))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel1)
                                                        .addComponent(jLabel2)
                                                        .addComponent(jLabel6)
                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(jLabel4)
                                                        .addComponent(jLabel5)
                                                        .addComponent(jLabel7))
                                                .addGap(10, 10, 10)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jSpinner2)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                                .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addComponent(jButton4))
                                                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jSpinner3, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jSpinner1)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jRadioButton1)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jRadioButton2)
                                                                .addGap(0, 148, Short.MAX_VALUE))
                                                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel6)
                                        .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(8, 8, 8)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jButton4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(7, 7, 7)
                                                .addComponent(jLabel4))
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jRadioButton1)
                                        .addComponent(jLabel5)
                                        .addComponent(jRadioButton2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jButton3)
                                        .addComponent(jButton1))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String nev = (jTextField1.getText()).trim();
        int iskola = ((Iskola) jComboBox2.getSelectedItem()).getId();
        int kor = ((Integer) jSpinner2.getValue());
        int korosztalyId = ((Korosztaly) jComboBox1.getSelectedItem()).getId();
        int rajtszam = ((Integer) jSpinner1.getValue());
        String nem = "";
        int helyezes = (Integer) jSpinner3.getValue();
        if (buttonGroup2.getSelection() != null) {
            nem = buttonGroup2.getSelection().getActionCommand();
        }
        try {
            if (nev.length() < 3) {
                throw new Exception("Adjon meg nevet!");
            }
            if (iskola < 1) {
                throw new Exception("Válasszon iskolát!");
            }
            if (rajtszam < 1) {
                throw new Exception("Adjon meg rajtszámot!");
            }
            ResultSet rs = Database.runSql("select * from 'Versenyzo' where number = ? and id != ?", Database.QUERRY, String.valueOf(rajtszam), versenyzo != null ? String.valueOf(versenyzo.getId()) : "-1");
            if (rs.next()) {
                throw new Exception("Már létezik versenyző ezzel a rajtszámmal!\nNév: " + rs.getString("name"));
            }

            if (nem.isEmpty()) {
                throw new Exception("Nem választott nemet!");
            }
            if (versenyzo == null) {
                Database.runSql("insert into 'Versenyzo' (position,name,sex,number,korosztaly_id,school_id,age) "
                                + "values(?,?,?,?,?,?,?)",
                        Database.UPDATE, String.valueOf(helyezes), nev, nem, String.valueOf(rajtszam), String.valueOf(korosztalyId), String.valueOf(iskola), String.valueOf(kor));

                jTextField1.setText("");
                jSpinner1.setValue(((int) jSpinner1.getValue()) + 1);
            } else {

                if (kor != versenyzo.getKor() || !nem.equals(versenyzo.getNem()) || korosztalyId != versenyzo.getKorosztaly().getId()) {
                    if (0 == JOptionPane.showOptionDialog(this, "Ha megváltoztatja a versenyző korát, vagy nemét, az eredménye törlődik!", "Figyelem!", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, new String[]{"Rendben", "Mégsem"}, null)) {
                        helyezes = 0;
                    } else {
                        throw new Exception("Nem lettek mentve az adatok.");
                    }
                }

                if (helyezes != versenyzo.getHelyezes()) {
                    if ((0 < helyezes && helyezes < versenyzo.getHelyezes()) || versenyzo.getHelyezes() == 0) {
                        Database.runSql("update Versenyzo set position = position+1 where position >= ? and position < ? and position != 0 and sex = ? and korosztaly_id = ?", Database.UPDATE,
                                String.valueOf(helyezes), String.valueOf(versenyzo.getHelyezes() != 0 ? versenyzo.getHelyezes() : 9999), versenyzo.getNem(), String.valueOf(versenyzo.getKorosztaly().getId()));
                    } else if ((0 < versenyzo.getHelyezes() && versenyzo.getHelyezes() < helyezes) || helyezes == 0) {
                        Database.runSql("update Versenyzo set position = position-1 where position > ? and position <= ? and position != 0 and sex = ? and korosztaly_id = ?", Database.UPDATE,
                                String.valueOf(versenyzo.getHelyezes()), String.valueOf(helyezes != 0 ? helyezes : 9999), versenyzo.getNem(), String.valueOf(versenyzo.getKorosztaly().getId()));
                    }
                }

                Database.runSql("update 'Versenyzo' set "
                                + "position = ?, "
                                + "name = ?, "
                                + "sex = ?, "
                                + "number = ?, "
                                + "korosztaly_id = ?,"
                                + "school_id = ?,"
                                + "age = ? "
                                + "where id = ?",
                        Database.UPDATE,
                        String.valueOf(helyezes),
                        nev,
                        nem,
                        String.valueOf(rajtszam),
                        String.valueOf(korosztalyId),
                        String.valueOf(iskola),
                        String.valueOf(kor),
                        String.valueOf(versenyzo.getId()));

                this.dispose();
            }
            jTextField1.requestFocus();

        } catch (SQLException ex) {
            Logger.getLogger(AddVersenyzoDialog.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            warn(ex.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new AddIskolaDialog(this).setVisible(true);
        jComboBox2.setModel(new DefaultComboBoxModel<Iskola>(new Iskola[]{new Iskola(0, "")}));
        try {
            ResultSet rs = Database.runSql("select * from 'Iskola' order by name");
            while (rs.next()) {
                jComboBox2.addItem(new Iskola(rs.getInt("id"), rs.getString("name")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddVersenyzoDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jSpinner1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jSpinner1FocusGained
        ((JSpinner.DefaultEditor) jSpinner1.getEditor()).getTextField().selectAll();
    }//GEN-LAST:event_jSpinner1FocusGained

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        int age = (int) jSpinner2.getValue();
        for (int i = 0; i < jComboBox1.getItemCount(); i++) {
            Korosztaly k = ((Korosztaly) jComboBox1.getItemAt(i));
            if (k.getMin() <= age && age <= k.getMax()) {
                jComboBox1.setSelectedIndex(i);
            }
        }
    }//GEN-LAST:event_jSpinner2StateChanged
    // End of variables declaration//GEN-END:variables
}
