/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hu.danielb;

import hu.danielb.components.ButtonEditor;
import hu.danielb.components.ButtonRenderer;
import hu.danielb.data.Database;
import hu.danielb.data.Iskola;
import hu.danielb.data.Korosztaly;
import hu.danielb.data.Versenyzo;
import hu.danielb.listeners.EditingStoppedListener;

import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author balu
 */
public class VersenyzokDialog extends BaseDialog {

    /**
     * Creates new form VersenyzokDialog
     */
    protected int to;
    protected int from;
    protected int row;
    protected String age;
    protected String sFrom;
    protected String sTo;
    protected int sortby = 4;
    protected boolean sortBackwards = false;
    protected Map<Integer, String> sortStrings;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;

    public VersenyzokDialog(Dialog owner) {
        super(owner);
        init();
        this.setLocationRelativeTo(owner);
    }

    public VersenyzokDialog(Frame owner) {
        super(owner);
        init();
        this.setLocationRelativeTo(owner);
    }

    private void init() {
        sortStrings = new HashMap<>();
        sortStrings.put(3, "Versenyzo.position");
        sortStrings.put(4, "Versenyzo.name");
        sortStrings.put(5, "Versenyzo.number");
        sortStrings.put(6, "Versenyzo.age");
        sortStrings.put(7, "K_name");
        sortStrings.put(8, "I_name");
        sortStrings.put(9, "Versenyzo.sex");

        initComponents();
        jTable1.getTableHeader().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int col = jTable1.columnAtPoint(e.getPoint());
                if (col == sortby) {
                    sortBackwards = !sortBackwards;
                } else {
                    sortBackwards = false;
                }
                sortby = col;
                jTextField1KeyReleased(null);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(800, 600));
        setMinimumSize(new java.awt.Dimension(800, 600));
        setModal(true);
        setResizable(false);

        loadData();
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Keres√©s:");

        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextField1KeyReleased(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new Iskola[]{new Iskola(0, "")}));
        try {
            ResultSet rs = Database.runSql("select * from 'Iskola' order by name");
            while (rs.next()) {
                jComboBox1.addItem(new Iskola(rs.getInt("id"), rs.getString("name")));
            }
        } catch (SQLException ex) {
            Logger.getLogger(AddVersenyzoDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jMenuBar1.setMaximumSize(new java.awt.Dimension(0, 0));
        jMenuBar1.setMinimumSize(new java.awt.Dimension(0, 0));
        jMenuBar1.setPreferredSize(new java.awt.Dimension(0, 0));

        jMenu1.setText("File");
        jMenu1.setMaximumSize(new java.awt.Dimension(0, 0));
        jMenu1.setPreferredSize(new java.awt.Dimension(0, 0));

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Print");
        jMenuItem1.setMaximumSize(new java.awt.Dimension(0, 0));
        jMenuItem1.setName(""); // NOI18N
        jMenuItem1.setPreferredSize(new java.awt.Dimension(0, 0));
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 574, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyReleased
        String find = jTextField1.getText().trim();
        if (evt != null && (evt.getModifiers() == KeyEvent.CTRL_DOWN_MASK || evt.getModifiers() == KeyEvent.VK_DEAD_CIRCUMFLEX)) {
            return;
        }
        if (!find.isEmpty()) {
            filterData(find);
        } else {
            loadData();
        }
    }//GEN-LAST:event_jTextField1KeyReleased

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            Printer printer = new Printer(jTable1);
        } catch (PrinterException | HeadlessException ex) {
            Logger.getLogger(VersenyzokDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        String nev = ((Iskola) jComboBox1.getSelectedItem()).getNev();
        if (nev.isEmpty()) {
            loadData();
            return;
        }
        filterData(nev);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void filterData(String filter) {
        Vector<Vector<String>> data = new Vector<>();
        filter = "%" + filter + "%";
        try {
            ResultSet rs = Database.runSql("select Versenyzo.*,Iskola.name as I_name,Korosztaly.name as K_name from Versenyzo "
                    + "inner join Iskola on Versenyzo.school_id=Iskola.id "
                    + "inner join Korosztaly on Versenyzo.korosztaly_id=Korosztaly.id "
                    + "where Versenyzo.name like ? "
                    + "or Versenyzo.name like ? "
                    + "or Versenyzo.number like ? "
                    + "or Versenyzo.age like ? "
                    + "or K_name like ? "
                    + "or I_name like ? "
                    + "order by " + sortStrings.get(sortby) + (sortBackwards ? " desc" : " asc"), Database.QUERRY, filter, filter, filter, filter, filter, filter);
            while (rs.next()) {
                int helyezes = rs.getInt("position");
                String hely = helyezes < 1 ? "" : String.valueOf(helyezes);
                data.add(new Vector<>(Arrays.asList(
                        new String[]{String.valueOf(rs.getInt("id")),
                                String.valueOf(rs.getInt("school_id")),
                                String.valueOf(rs.getInt("korosztaly_id")),
                                hely, rs.getString("name"),
                                String.valueOf(rs.getInt("number")),
                                String.valueOf(rs.getInt("age")),
                                rs.getString("K_name"),
                                rs.getString("I_name"),
                                rs.getString("sex"),
                                "Szerkeszt√©s"})));
            }
        } catch (SQLException ex) {
            Logger.getLogger(VersenyzokDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadData(data);
    }

    private void loadData() {

        Vector<Vector<String>> data = new Vector<>();
        try {
            ResultSet rs = Database.runSql("select Versenyzo.*,Iskola.name as I_name,Korosztaly.name as K_name from Versenyzo "
                    + "inner join Iskola on Versenyzo.school_id=Iskola.id "
                    + "inner join Korosztaly on Versenyzo.korosztaly_id=Korosztaly.id "
                    + "order by " + sortStrings.get(sortby) + (sortBackwards ? " desc" : " asc"));
            while (rs.next()) {
                data.add(new Vector<>(Arrays.asList(
                        new String[]{String.valueOf(rs.getInt("id")),
                                String.valueOf(rs.getInt("school_id")),
                                String.valueOf(rs.getInt("korosztaly_id")),
                                rs.getInt("position") < 1 ? "" : String.valueOf(rs.getInt("position")),
                                rs.getString("name"),
                                String.valueOf(rs.getInt("number")),
                                String.valueOf(rs.getInt("age")),
                                rs.getString("K_name"),
                                rs.getString("I_name"),
                                rs.getString("sex"),
                                "Szerkeszt√©s"})));
            }
        } catch (SQLException ex) {
            Logger.getLogger(VersenyzokDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        loadData(data);

    }

    private void loadData(Vector<Vector<String>> data) {

        jTable1.setModel(new DefaultTableModel(data, new Vector<>(Arrays.asList(
                new String[]{
                        "",
                        "",
                        "",
                        "Helyez√©s" + putSortMark(3),
                        "N√©v" + putSortMark(4),
                        "Rajtsz√°m" + putSortMark(5),
                        "Sz√ºlet√©si √©v" + putSortMark(6),
                        "Koroszt√°ly" + putSortMark(7),
                        "Iskola" + putSortMark(8),
                        "Nem" + putSortMark(9),
                        ""}))) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return column == 10;
            }
        });
        setColumnWidth(0, 0);
        setColumnWidth(1, 0);
        setColumnWidth(2, 0);
        setColumnWidth(3, 65);
        setColumnWidth(5, 65);
        setColumnWidth(6, 75);
        setColumnWidth(7, 90);
        setColumnWidth(9, 40);
        setColumnWidth(10, 90);
        jTable1.getColumnModel().getColumn(10).setCellRenderer(new ButtonRenderer());
        jTable1.getColumnModel().getColumn(10).setCellEditor(new ButtonEditor(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        }).addEditingStoppedListener(new EditingStoppedListener() {
            @Override
            public void editingStopped() {
                loadData();
            }
        }));
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.getTableHeader().setResizingAllowed(false);
    }

    private void setColumnWidth(int columnNumber, int size) {
        TableColumn tc = jTable1.getColumnModel().getColumn(columnNumber);
        tc.setMaxWidth(size);
        tc.setMinWidth(size);
        tc.setPreferredWidth(size);
    }

    private void editButtonActionPerformed(ActionEvent evt) {
        int row = evt.getID();
        AddVersenyzoDialog dialog = new AddVersenyzoDialog(this,
                new Versenyzo(Integer.parseInt((String) jTable1.getValueAt(row, 0)),
                        "".equals(jTable1.getValueAt(row, 3)) ? 0 : Integer.parseInt((String) jTable1.getValueAt(row, 3)),
                        (String) jTable1.getValueAt(row, 4),
                        (String) jTable1.getValueAt(row, 9),
                        Integer.parseInt((String) jTable1.getValueAt(row, 5)),
                        new Korosztaly(Integer.parseInt((String) jTable1.getValueAt(row, 2)), "", 0, 0),
                        new Iskola(Integer.parseInt((String) jTable1.getValueAt(row, 1)), (String) jTable1.getValueAt(row, 8)),
                        Integer.parseInt((String) jTable1.getValueAt(row, 6))));

        dialog.setVisible(true);
        jTextField1.setText("");
    }

    private String putSortMark(int i) {
        if (i == sortby) {
            if (sortBackwards) {
                return "^";
            }
            return "Àá";
        }
        return "";
    }
    // End of variables declaration//GEN-END:variables
}
